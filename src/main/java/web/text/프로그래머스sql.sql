/*프로그래머스 SQL 문제*/
# ============================================================= 2024-08-06 ===================================================================
#1. 인기있는 아이스크림
SELECT FLAVOR from FIRST_HALF order by TOTAL_ORDER DESC , SHIPMENT_ID ASC
#2.모든 레코드 조회하기
SELECT * from ANIMAL_INS order by ANIMAL_ID ASC
#3.역순 정렬하기
SELECT NAME,DATETIME from ANIMAL_INS order by ANIMAL_ID DESC
#4. 동물의 아이디와 이름
SELECT ANIMAL_ID,NAME from ANIMAL_INS order by ANIMAL_ID ASC
#5. 여러 기준으로 정렬하기
SELECT ANIMAL_ID,NAME,DATETIME from ANIMAL_INS order by NAME ASC ,DATETIME DESC
#6. 과일로 만든 아이스크림 고르기
select FIRST_HALF.FLAVOR from FIRST_HALF inner join ICECREAM_INFO on FIRST_HALF.FLAVOR = ICECREAM_INFO.FLAVOR where TOTAL_ORDER>3000 and ICECREAM_INFO.INGREDIENT_TYPE = 'fruit_based'
#7.조건에 부합하는 중고거래 댓글 조회하기
SELECT A.TITLE,A.BOARD_ID,B.REPLY_ID,B.WRITER_ID,B.CONTENTS,DATE_FORMAT(B.CREATED_DATE, '%Y-%m-%d') CREATED_DATE FROM USED_GOODS_BOARD A INNER JOIN USED_GOODS_REPLY B ON A.BOARD_ID = B.BOARD_ID WHERE A.CREATED_DATE BETWEEN '2022-10-01' AND '2022-10-31' ORDER BY CREATED_DATE ASC, TITLE ASC
#8.강원도에 위치한 생산공장 목록 출력하기
SELECT FACTORY_ID,FACTORY_NAME,ADDRESS from FOOD_FACTORY where ADDRESS like "강원도%"
#9. 아픈 동물 찾기
SELECT ANIMAL_ID,NAME from ANIMAL_INS where INTAKE_CONDITION = 'sick'
#10. 어린 동물 찾기
SELECT ANIMAL_ID,NAME from ANIMAL_INS where INTAKE_CONDITION != 'aged'
#11. 상위 n개 레코드
SELECT NAME from ANIMAL_INS order by DATETIME limit 1
#12. Python 개발자 찾기
select ID,EMAIL,FIRST_NAME,LAST_NAME from DEVELOPER_INFOS where 'Python' in (SKILL_1,SKILL_2,SKILL_3) order by ID ASC
# ============== (2 일차 SQL 문제) 2024-08-07 =================#
# 1.[ SUM, MAX, MIN ] 가장 비싼 상품 구하기
SELECT PRICE AS MAX_PRICE FROM PRODUCT ORDER BY MAX_PRICE DESC LIMIT 1
# 2.[ SUM, MAX, MIN ] 최댓값 구하기
SELECT MAX(DATETIME) AS 시간 FROM ANIMAL_INS
# 3.[ SUM, MAX, MIN ] 가격이 제일 비싼 식품의 정보 출력하기
SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_CD,CATEGORY,PRICE FROM FOOD_PRODUCT ORDER BY PRICE DESC LIMIT 1
# 4.[ SUM, MAX, MIN ] 최솟값 구하기
SELECT MIN(DATETIME) 시간 FROM ANIMAL_INS
# 5.[ SUM, MAX, MIN ] 동물 수 구하기
SELECT COUNT(ANIMAL_TYPE) FROM ANIMAL_INS
# 6.[ SUM, MAX, MIN ] 중복 제거하기
SELECT COUNT(DISTINCT(NAME)) AS COUNT FROM ANIMAL_INS
# 7.[ SUM, MAX, MIN ] 조건에 맞는 아이템들의 가격의 총합 구하기
# SELECT SUM(PRICE) AS TOTAL_PRICE FROM ITEM_INFO GROUP BY RARITY ORDER BY TOTAL_PRICE DESC LIMIT 1
SELECT SUM(PRICE) AS TOTAL_PRICE FROM ITEM_INFO WHERE RARITY = 'LEGEND'
# 8. [SELECT] 조건에 맞는 회원수 구하기
SELECT COUNT(AGE) FROM USER_INFO WHERE AGE >= 20 AND AGE <= 29 AND YEAR(JOINED) = 2021
# 9. [SELECT] 잔챙이 잡은 수 구하기
SELECT COUNT(*) FISH_COUNT FROM FISH_INFO WHERE LENGTH is NULL
# 10. [SELECT] 특정 형질을 가지는 대장균 찾기
SELECT COUNT(*) AS COUNT FROM ECOLI_DATA WHERE NOT (GENOTYPE & 2) AND (GENOTYPE & 1 OR GENOTYPE & 4)
# 11. [GROUP BY]자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기
SELECT CAR_TYPE ,COUNT(*) CARS FROM CAR_RENTAL_COMPANY_CAR WHERE OPTIONS LIKE '%시트%' GROUP BY CAR_TYPE ORDER BY CAR_TYPE ASC
# 12. [GROUP BY]성분으로 구분한 아이스크림 총 주문량
SELECT INGREDIENT_TYPE , SUM(TOTAL_ORDER) TOTAL_ORDER FROM FIRST_HALF A INNER JOIN ICECREAM_INFO B ON A.FLAVOR = B.FLAVOR GROUP BY INGREDIENT_TYPE ORDER BY TOTAL_ORDER ASC
# 13. [GROUP BY]진료과별 총 예약 횟수 출력하기
SELECT MCDP_CD 진료과코드 , COUNT(APNT_YMD) 5월예약건수 FROM APPOINTMENT WHERE YEAR(APNT_YMD)=2022 AND MONTH(APNT_YMD) = 5 GROUP BY MCDP_CD ORDER BY 5월예약건수 ASC ,진료과코드 ASC
# 14. [GROUP BY]고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE, COUNT(*) COUNT FROM ANIMAL_INS GROUP BY ANIMAL_TYPE ORDER BY ANIMAL_TYPE ASC
# 15. [GROUP BY]동명 동물 수 찾기
SELECT NAME, COUNT(*) COUNT FROM ANIMAL_INS WHERE NAME IS NOT NULL GROUP BY NAME HAVING COUNT(*)>1 ORDER BY NAME ASC
# 16. [GROUP BY]조건에 맞는 사원 정보 조회하기
SELECT sum(C.SCORE) SCORE ,B.EMP_NO,B.EMP_NAME,B.POSITION,B.EMAIL FROM HR_DEPARTMENT A INNER JOIN HR_EMPLOYEES B ON A.DEPT_ID = B.DEPT_ID JOIN HR_GRADE C ON B.EMP_NO = C.EMP_NO group by EMP_NO order by SCORE DESC limit 1
# 17. [GROUP BY]물고기 종류 별 잡은 수 구하기
select COUNT(*) FISH_COUNT , B.FISH_NAME from FISH_INFO A inner join FISH_NAME_INFO B on A.FISH_TYPE = B.FISH_TYPE GROUP BY B.FISH_NAME ORDER BY FISH_COUNT DESC
# 18. [JOIN]상품 별 오프라인 매출 구하기
SELECT A.PRODUCT_CODE,SUM(B.SALES_AMOUNT)*A.PRICE SALES FROM PRODUCT A INNER JOIN OFFLINE_SALE B ON A.PRODUCT_ID = B.PRODUCT_ID GROUP BY A.PRODUCT_ID ORDER BY SALES DESC , PRODUCT_CODE ASC