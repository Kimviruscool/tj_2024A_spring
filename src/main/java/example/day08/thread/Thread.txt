> 프로그램 : 프로그래밍 언어들의 명령어 집합
> 프로세스 : 현재 실행중인 프로그램
    > 프로그램 1개당 프로세스 존재

> 멀티 태스킹 : 두 가지 이상의 일 / 프로그램 동시 처리
> 멀티 프로세스 : 운영체제가 동시에 여러 개의 프로세스를 생성해서 처리하는 기술
    > 멀티 프로세스가 프로그램 단위의 멀티 태스킹
    > 멀티 프로세스는 서로 독립적이다. (서로에게 영향 X)
        > ex) 카카오톡(프로그램 / 프로세스), 크롬 브라우저(프로그램 / 프로세스)
        > 만약에 카카오톡에서 오류 / 문제가 발생해도 크롬 브라우저는 정상적으로 작동됨.

> 스레드 : 프로세스 내에서 실행되는 흐름의 단위
    > 싱글 스레드 : 프로세스 내 실행의 흐름이 1개이다.
    > 멀티 스레드 : 프로세스 내 실행의 흐름이 2개 이상이다.
    > 멀티 스레드가 스레드 단위의 멀티 태스킹
    > 멀티 스레드는 서로 종속적이다. (서로가 서로에게 영향을 받음.)
        > ex) 카카오톡(메세지 전송, 파일 전송, 사진 전송 등)
        > if 파일 전송 시 오류가 발생하면 카카오톡 프로세스가 종료되므로 메세지 전송도 같이 종료된다.

> 싱글 스레드 구현 X -> 제공 받는다.
    > JAVA 코드를 컴파일해서 실행하기 위한 내장 싱글 스레드를 제공한다. (main 함수)
    > JS(크롬 브라우저가 스레드)

> 멀티 스레드 구현 방법
    > * 상속 extends : 하나의 클래스만 상속받을 수 있음.
    > * 구현 implements : 여러 개의 인터페이스로부터 구현 가능
    > * 익명 구현체 : 구현하는 클래스의 이름이 없다. 1회성 구현체를 만들 때 주로 사용
    > 1. Thread 클래스로 부터 상속 받아 run 메소드 Override
        > class 클래스명 extends Thread{}
        > @Override public void run() {멀티 스레드 처리할 실행문;}
        > 클래스 변수명 = new 생성자();
        > 변수명.start();

    > 2. Runnable 인터페이스로 부터 추상메소드 run()을 Override
        > class 클래스명 implements Runnable{}
        > @Override public void run() {멀티 스레드 처리할 실행문;}
        > Runnable 변수명(구현체) = new 생성자();
        > Thread thread = new Thread(변수명(구현체));
            > Thread thread = new Thread(new 생성자()); -> 위에 2개 합친 것
        > thread.start();

    > 3. (익명) 구현체
        > 1)
            > Thread 변수명 = new Thread(){
            >   @Override
                public void run(){
                멀티 스레드 처리할 실행문;
                    }};
            > 변수명.start();

        > 2)
            > Thread 변수명 = new Thread(new Runnable(){
                    @Override
                    public void run(){
                        멀티 스레드 처리할 실행문;
                    }
                })
            > 변수명.start();
